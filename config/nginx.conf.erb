daemon off;
worker_processes <%= ENV['NGINX_WORKERS'] || 'auto' %>;

events {
  use epoll;
  accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 6;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  server_tokens off;


  access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'stderr error' %>;


  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # Must read the body in 5 seconds.
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  server {
    listen <%= ENV["PORT"] || 5000 %> reuseport;
    port_in_redirect off;
    keepalive_timeout 5;
    charset UTF-8;
    root dist/;

    # Set error page
    error_page 404 500 /404.html;


    location / {
      try_files $uri.html $uri $uri/ @404;

    }


    # Redirect to 404.html
    location ~ \.html$ {
      try_files $uri =404;
    }


    # Redirect non secure requests 
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }


    # Redirect wrong host
    if ($host != <%= ENV["APP_DOMAIN"] %>) {
      return 301 $http_x_forwarded_proto://<%= ENV["APP_DOMAIN"] %>$request_uri;
    }


    # Try to serve files
    location ~ ^/.*$ {
      set $route /.*;

      try_files $uri.html $uri $uri/ index.html @404;

    }


  # Need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
  location @404 {
    return 404;
  }

  }
}
